/*
   american fuzzy lop - LLVM-mode instrumentation pass
   ---------------------------------------------------

   Written by Laszlo Szekeres <lszekeres@google.com> and
              Michal Zalewski <lcamtuf@google.com>

   LLVM integration design comes from Laszlo Szekeres. C bits copied-and-pasted
   from afl-as.c are Michal's fault.

   Copyright 2015, 2016 Google Inc. All rights reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at:

     http://www.apache.org/licenses/LICENSE-2.0

   This library is plugged into LLVM when invoking clang through afl-clang-fast.
   It tells the compiler to add code roughly equivalent to the bits discussed
   in ../afl-as.h.

 */

#include "../config.h"
#include "../debug.h"

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "llvm/ADT/Statistic.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/LegacyPassManager.h"
#include "llvm/IR/Module.h"
#include "llvm/Support/Debug.h"
#include "llvm/CodeGen/AsmPrinter.h"
#include "llvm/Transforms/IPO/PassManagerBuilder.h"

/*changes*/
#include "llvm/IR/Function.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/DebugInfo.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/User.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/InstrTypes.h"
#include "llvm/IR/Type.h"
#include <stdint.h>
/*end of changes*/

using namespace llvm;
template<typename InputIterator >

namespace {

  class AFLCoverage : public ModulePass {

    public:

      static char ID;
      /*start of change*/
      static int bbcount;
      Constant *InstFuncConst;
      Constant* MyPTCreateConst;
      Constant* MyAssertConst;
      const Type* pthreadTy;
      static bool bbAfterAssert; //indicates if we are in the successor of the assert_fail block
      static bool flagAssert; 

     /*flag that indicates if we've passed through a assert_fail block and, therefore, 
    should instrument the subsequent one (which corresponds to the non-failing branch of the assertion)*/
      
      /* end of change*/

      AFLCoverage() : ModulePass(ID) { }

      bool runOnModule(Module &M) override;
      const char *getPassName() const override {
        return "American Fuzzy Lop Instrumentation";
/*start changes*/
      virtual bool runOnBasicBlock(BasicBlock& BB) {
            
            LLVMContext &Context = BB.getContext();
            std::vector<Value*> Args(1);
            Args[0] = ConstantInt::get(IntegerType::get(Context, 32), bbcount);
            CallInst::Create(InstFuncConst, Args.begin(), Args.end(), "", BB.getFirstNonPHI()); //error
            bbcount++;
            
            //loop over all of the instructions, searching for pthread_create or assertion calls 
            for (BasicBlock::iterator I = BB.begin(), E = BB.end(); I != E; ++I)
            {
                if (CallInst *CI = dyn_cast<CallInst>(I))
                {
                    Function *FUNC = CI->getCalledFunction();
                    //llvm::errs() << "function call: " << fun->getName() << "\n";
                    if (FUNC && FUNC->getName() == "pthread_create")
                    {
                        Value* threadpt = CI->getArgOperand(0);
                        //threadpt->dump();
                        //threadpt->getType()->dump();
                        std::vector<Value*> Args(1);
                        Args[0] = threadpt;
			BasicBlock::iterator tmpI = I;
			tmpI++;
                        Instruction* insertPoint = tmpI;
                        //llvm::errs() << "insertPoint: " << insertPoint << "\n";
                        CallInst::Create(MyPTCreateConst, Args.begin(), Args.end(), "", insertPoint); //error
			//I += 1;
                    }
 		   else if(FUNC && FUNC->getName() == "__assert_fail")
                    {
			//llvm::errs() << "assert fail!\n";
			std::vector<Value*> Args(1);
            		Args[0] = ConstantInt::get(IntegerType::get(Context, 32), 0);
			BasicBlock::iterator tmpI = I;
			//tmpI--;
                        Instruction* insertPoint = tmpI;
            		CallInst::Create(MyAssertConst, Args.begin(), Args.end(), "", insertPoint); //error
			flagAssert = true;
		    }	
		    else if(flagAssert && bbAfterAssert)
		    {
			//llvm::errs() << "assert success!\n";
			std::vector<Value*> Args(1);
            		Args[0] = ConstantInt::get(IntegerType::get(Context, 32), 1);
			BasicBlock::iterator tmpI = I;
			tmpI++;
                        Instruction* insertPoint = tmpI;
            		CallInst::Create(MyAssertConst, Args.begin(), Args.end(), "", insertPoint); //error
			flagAssert = false;
			bbAfterAssert = false;
		    }
                }
            }
            
            return true;
	}
/* end of changes*/
  };

}



char AFLCoverage::ID = 0;
int callCounter=0;

/*start of change*/
int bbcount = 0;
bool flagAssert = false;
bool bbAfterAssert = false;
/*end of changes*/

bool AFLCoverage::runOnModule(Module &M) {

  LLVMContext &C = M.getContext();

  IntegerType *Int8Ty  = IntegerType::getInt8Ty(C);
  IntegerType *Int32Ty = IntegerType::getInt32Ty(C);
/*start of change*/
	    if (M.getPointerSize() == llvm::Module::Pointer64)
            {
                pthreadTy = Type::getInt64Ty(M.getContext());
            }
            else
            {
                pthreadTy = Type::getInt32Ty(M.getContext());
}


/* end of change*/


  /* Show a banner */

  char be_quiet = 0;

  if (isatty(2) && !getenv("AFL_QUIET")) {

    SAYF(cCYA "afl-llvm-pass " cBRI VERSION cRST " by <lszekeres@google.com>\n");

  } else be_quiet = 1;

  /* Decide instrumentation ratio */

  char* inst_ratio_str = getenv("AFL_INST_RATIO");
  unsigned int inst_ratio = 100;

  if (inst_ratio_str) {

    if (sscanf(inst_ratio_str, "%u", &inst_ratio) != 1 || !inst_ratio ||
        inst_ratio > 100)
      FATAL("Bad value of AFL_INST_RATIO (must be between 1 and 100)");

  }

  /* Get globals for the SHM region and the previous location. Note that
     __afl_prev_loc is thread-local. */

  GlobalVariable *AFLMapPtr =
      new GlobalVariable(M, PointerType::get(Int8Ty, 0), false,
                         GlobalValue::ExternalLinkage, 0, "__afl_area_ptr");

  GlobalVariable *AFLPrevLoc = new GlobalVariable(
      M, Int32Ty, false, GlobalValue::ExternalLinkage, 0, "__afl_prev_loc",
      0, GlobalVariable::GeneralDynamicTLSModel, 0, false);

// declaration for new memory space same as above

/*start of change*/
           InstFuncConst = M.getOrInsertFunction("myBasicBlockEntry",
                                                  Type::getVoidTy(C), //return type
                                                  Type::getInt32Ty(C),//param0: basic block counter
                                                  NULL);
            Function *InstFunc = cast<Function>(InstFuncConst);
            InstFunc->setCallingConv(CallingConv::C);
            
            
            //myPThreadCreate
            MyPTCreateConst = M.getOrInsertFunction("myPThreadCreate",
                                                   Type::getVoidTy(C), //return type
                                                   pthreadTy->getPointerTo(),//param0: thread pointer
                                                   NULL);
            Function *MyPTCreateFunc = cast<Function>(MyPTCreateConst);
            MyPTCreateFunc->setCallingConv(CallingConv::C);
            
            //myAssert
            MyAssertConst = M.getOrInsertFunction("myAssert",
                                                   Type::getVoidTy(C), //return type
						   Type::getInt32Ty(C),//param:int indicating failure (0) or success (1)
                                                   NULL);
            Function *MyAssertFunc = cast<Function>(MyAssertConst);
            MyAssertFunc->setCallingConv(CallingConv::C);

/*end of change*/

  /* Instrument all the things! */

  int inst_blocks = 0;

  for (auto &F : M)
    for (auto &BB : F) {

      BasicBlock::iterator IP = BB.getFirstInsertionPt();
      IRBuilder<> IRB(&(*IP));

      if (R(100) >= inst_ratio) continue;

      /* Make up cur_loc */

      unsigned int cur_loc = R(MAP_SIZE);

      ConstantInt *CurLoc = ConstantInt::get(Int32Ty, cur_loc);         
       
      //OKF("%p",CurLoc);

      OKF("cur_loc %u",cur_loc);
      unsigned int shifted_cur = cur_loc >> 1;
      OKF("shifted cur_loc %u",shifted_cur);

      /* Load prev_loc */

      LoadInst *PrevLoc = IRB.CreateLoad(AFLPrevLoc);
      PrevLoc->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
      Value *PrevLocCasted = IRB.CreateZExt(PrevLoc, IRB.getInt32Ty());
     
      /* Load SHM pointer */

      LoadInst *MapPtr = IRB.CreateLoad(AFLMapPtr);
      MapPtr->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
      Value *MapPtrIdx =
          IRB.CreateGEP(MapPtr, IRB.CreateXor(PrevLocCasted, CurLoc));

      /* Update bitmap */

      LoadInst *Counter = IRB.CreateLoad(MapPtrIdx);
      Counter->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
      Value *Incr = IRB.CreateAdd(Counter, ConstantInt::get(Int8Ty, 1));
      IRB.CreateStore(Incr, MapPtrIdx)
          ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));

      /* Set prev_loc to cur_loc >> 1 */

      StoreInst *Store =
          IRB.CreateStore(ConstantInt::get(Int32Ty, cur_loc >> 1), AFLPrevLoc);
      Store->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));

     // OKF("prev value %u",dyn_cast<llvm::IntegerType>(*AFLPrevLoc));
      
     //llvm::AsmPrinter::EmitGlobalVariable();

     // OKF("changed value: %u",);


      inst_blocks++;

      /*for (BasicBlock::iterator i = (&BB)->begin(), ie = (&BB)->end(); i != ie; ++i) {
          if (CallInst* callInst = dyn_cast<CallInst>(&*i)) {
            // We know we've encountered a call instruction, so we
            // need to determine if it's a call to the
            // function pointed to by m_func or not.
            if (callInst->getCalledFunction() == TargetFunc)
              ++callCounter;
          }
        } */

    }

/*start of change*/
	for (Module::iterator F = M.begin(), E = M.end(); F != E; ++F) {
                if (F->isDeclaration()) continue;
                for (Function::iterator BB = F->begin(), E = F->end(); BB != E; ++BB) {
                    BasicBlock& B = *BB;
                    AFLCoverage::runOnBasicBlock(B);
		     //set bbAfterAssert to true if we found an assert_fail call
		     if(flagAssert)
			bbAfterAssert = true;
                }
/* end of change*/
}

  /* Say something nice. */

  if (!be_quiet) {

    if (!inst_blocks) WARNF("No instrumentation targets found.");
    else OKF("Instrumented %u locations (%s mode, ratio %u%%).",
             inst_blocks,
             getenv("AFL_HARDEN") ? "hardened" : "non-hardened",
             inst_ratio);

  }

  return true;

}


static void registerAFLPass(const PassManagerBuilder &,
                            legacy::PassManagerBase &PM) {

  PM.add(new AFLCoverage());

}


static RegisterStandardPasses RegisterAFLPass(
    PassManagerBuilder::EP_OptimizerLast, registerAFLPass);

static RegisterStandardPasses RegisterAFLPass0(
    PassManagerBuilder::EP_EnabledOnOptLevel0, registerAFLPass);
